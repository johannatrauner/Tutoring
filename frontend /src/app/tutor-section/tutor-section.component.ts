import { Component, computed, signal } from '@angular/core';
import { User } from '../shared/user';
import { TutorService } from '../shared/tutor.service';
import { Subject, Topic } from '../shared/subject';
import { TutoringSessionItemComponent } from '../tutoring-session-item/tutoring-session-item.component';
import { RouterLink } from '@angular/router';
import { RequestSession } from '../shared/request_session';
import { ToastrService } from 'ngx-toastr';
import { RequestItemComponent } from '../request-item/request-item.component';

@Component({
  selector: 'bs-tutor-section',
  imports: [TutoringSessionItemComponent, RouterLink, RequestItemComponent],
  templateUrl: './tutor-section.component.html',
  styles: ``,
})
export class TutorSectionComponent {
  currentDate = new Date();

  role = 'tutor';
  user = signal<User | undefined>(undefined);
  subjects = signal<Subject[]>([]);
  topics = signal<Topic[]>([]);
  requests = signal<RequestSession[]>([]);

  // Signal to control the visibility of sections
  showBookedSessions = signal(false);
  showRequests = signal(false);
  showSubjects = signal(false);
  constructor(
    private tutorService: TutorService,
    private toastr: ToastrService,
  ) {}

  ngOnInit() {
    this.getProfile();
    this.openRequests;
  }

  getProfile() {
    this.tutorService.getProfile().subscribe((res) => {
      this.user.set(res);
      this.subjects.set(res.subjects ?? []);
      this.topics.set(res.subjects.topics);
      this.requests.set(res.tutor_requests);
      this.role = res.role || 'tutor';
    });
  }

  // Accepts a session request by its ID and updates the requests list
  acceptRequest(requestId: number) {
    this.tutorService.acceptSessionRequest(requestId).subscribe((res) => {
      this.toastr.success('Super, du hast die Anfrage angenommen!', 'Success');
      this.tutorService.getProfile().subscribe((res) => {
        this.requests.set(res.tutor_requests);
      });
    });
  }

  // Rejects a session request by its ID and updates the requests list
  rejectRequest(requestId: number) {
    this.tutorService.rejectSessionRequest(requestId).subscribe((res) => {
      this.toastr.info('Du hast die Anfrage abgeleht!', 'Information');
      this.tutorService.getProfile().subscribe((res) => {
        this.requests.set(res.tutor_requests);
      });
    });
  }

  /*
   * generated by ChatGPT
   * Returns a list of all tutoring sessions that are booked and scheduled to start in the future.
   */
  upcomingSessions = computed(() => {
    const allSessions = this.user()?.tutor_sessions ?? [];
    return allSessions.filter(
      (s) =>
        this.parseDate(s.start_time) > this.currentDate &&
        s.status === 'booked',
    );
  });

  // List for open Requests (Status = 'requested')
  openRequests = computed(() =>
    this.requests().filter((r) => r.status === 'requested'),
  );

  // List for past Sessions (status = 'booked', start_time <= now)
  pastSessions = computed(() => {
    const allSessions = this.user()?.tutor_sessions ?? [];
    return allSessions.filter(
      (s) =>
        this.parseDate(s.start_time) <= this.currentDate &&
        s.status === 'booked',
    );
  });

  parseDate(s: string): Date {
    return new Date(s.replace(' ', 'T'));
  }
}
