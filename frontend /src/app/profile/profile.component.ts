import { Component, computed, signal } from '@angular/core';
import { TutorService } from '../shared/tutor.service';
import { Subject, Topic } from '../shared/subject';
import { User } from '../shared/user';
import { TutoringSession } from '../shared/tutoring_session';
import { TutoringSessionItemComponent } from '../tutoring-session-item/tutoring-session-item.component';

@Component({
  selector: 'bs-profile',
  standalone: true,
  templateUrl: './profile.component.html',
  imports: [TutoringSessionItemComponent],
  styles: ``,
})
export class ProfileComponent {
  //role of the user, default is 'tutor'
  role = 'tutor';

  // Signals for user profile data
  subjects = signal<Subject[]>([]);
  topics = signal<Topic[]>([]);
  user = signal<User | undefined>(undefined);
  seekerSessions = signal<TutoringSession[]>([]);
  currentDate = new Date();

  constructor(private tutorService: TutorService) {}

  ngOnInit() {
    this.getProfile();
  }

  // Fetches the user profile data from the tutor service
  getProfile() {
    this.tutorService.getProfile().subscribe((res) => {
      this.user.set(res);
      this.subjects.set(res.subjects ?? []);
      this.topics.set(res.subjects.topics);
      this.seekerSessions.set(res.seeker_sessions ?? []);
      this.role = res.role || 'tutor';
    });
  }

  /*generated by ChatGPT
   * filters the sessions based on the current date and status
   * computed property for upcoming sessions (Status = 'booked', start_time > now)
   * This will return all sessions that are booked and scheduled to start in the future.
   * */
  upcomingSessions = computed(() => {
    const allSessions = this.user()?.seeker_sessions ?? [];
    return allSessions.filter(
      (s) =>
        this.parseDate(s.start_time) > this.currentDate &&
        s.status === 'booked',
    );
  });

  /*generated by ChatGPT
   * filters the sessions based on the current date and status
   * computed property for past sessions (Status = 'booked', start_time <= now)
   * This will return all sessions that are booked and were in the past.
   * */
  pastSessions = computed(() => {
    const allSessions = this.user()?.seeker_sessions ?? [];
    return allSessions.filter(
      (s) =>
        this.parseDate(s.start_time) <= this.currentDate &&
        s.status === 'booked',
    );
  });

  parseDate(s: string): Date {
    return new Date(s.replace(' ', 'T'));
  }
}
